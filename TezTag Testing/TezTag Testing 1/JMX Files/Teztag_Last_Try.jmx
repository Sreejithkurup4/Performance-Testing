<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="UAT_Server" elementType="Argument">
            <stringProp name="Argument.name">UAT_Server</stringProp>
            <stringProp name="Argument.value">staging-token.teztag.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Integration_Server" elementType="Argument">
            <stringProp name="Argument.name">Integration_Server</stringProp>
            <stringProp name="Argument.value">integration-token.teztag.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Dev_Server" elementType="Argument">
            <stringProp name="Argument.name">Dev_Server</stringProp>
            <stringProp name="Argument.value">dev-token.teztag.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Integration_Customer_Token" elementType="Argument">
            <stringProp name="Argument.name">Integration_Customer_Token</stringProp>
            <stringProp name="Argument.value">eyJraWQiOiJkNU05UElkTHlMRCt5N3dhajZmb3VleVwvOFlhRHhxZ0dPOEhxKzkxTmtyZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI0MTEzMmFhYy1hYTIyLTQ4NTEtYjQwMC1lYjRlMjc0NGI2MjYiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aC0xLmFtYXpvbmF3cy5jb21cL2FwLXNvdXRoLTFfT2VramVnNEhqIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjp0cnVlLCJjb2duaXRvOnVzZXJuYW1lIjoiNDExMzJhYWMtYWEyMi00ODUxLWI0MDAtZWI0ZTI3NDRiNjI2IiwiZ2l2ZW5fbmFtZSI6Ik1hYWx1IiwiYXVkIjoiNDU3ZDBoa2k2NmpqaDJvc2FtNWM5b3I0M2MiLCJldmVudF9pZCI6IjZjZTUxOWU2LTYyMDktNDkwYi1iMmRhLTExZTk5MzZhZTQ0MSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjA3MDU2MDA1LCJwaG9uZV9udW1iZXIiOiIrOTE5NjMzODU1Njg4IiwiZXhwIjoxNjA3MDU5NjA1LCJpYXQiOjE2MDcwNTYwMDUsImZhbWlseV9uYW1lIjoiUGFzY2FsIiwiZW1haWwiOiJtYWFsdUBxYnVyc3QuY29tIn0.ANX9_E70Ae8u6hevEcgu2Hl08_y9kY1MIKn7ZF1v_Ft4pbG_rsHH0yWzdfG_7yz76QO3sNKwpTEqDsbkUvtEkPTwRhiZ84bxQvO3DoArnuavfLUFI6H8muLMwXWOf5C1TGgaAhXIAQ-p0-D5cSKl4jXqmmcijeort9bnVWEVcRUMRHDd-MKemsZCycoDQvRB4PD_uVGj8wTfiOawHhEejb7mXcg_S_jEA_izlzntalVd2qOUOpwtwbKQOP4YEHn7m-J8OdQJHLXPX0ziHEGHElvTH86Eu8fAh9gGfJpHIdsRuwCAHsU_omemrV3I4VjfHYOWvWQw9aQW-Xy2Gwkqug</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Integration_Seller_Token" elementType="Argument">
            <stringProp name="Argument.name">Integration_Seller_Token</stringProp>
            <stringProp name="Argument.value">eyJraWQiOiI1Q3gxb0ZMRGxRNTVhYnJJdkRxeGJaQjROdWNnNUVaVTZnbjRNU3FvOG1BPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0ZWQzYTg5MS0zMDE2LTQyNzMtOGZmNS1hNGMxZmZjYWVhMzAiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aC0xLmFtYXpvbmF3cy5jb21cL2FwLXNvdXRoLTFfbkU1U3NTcXlYIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjpmYWxzZSwiY29nbml0bzp1c2VybmFtZSI6Ijk5OTUxNDQ5MTMiLCJnaXZlbl9uYW1lIjoiVmlnbmVzaCIsInBpY3R1cmUiOiJodHRwczpcL1wvZGV2LWFzc2V0cy50ZXp0YWcuaW5cL3Byb2ZpbGVfaW1hZ2VzXC85OTk1MTQ0OTEzXC8xNjA2NzM4MDg3NTQ0LnBuZyIsImF1ZCI6IjdxcGYyNTFhNjFnNjZiN3BuZTY2cXBqbnFmIiwiZXZlbnRfaWQiOiJmNGY1MWU3Ny0xYmM4LTRhMTEtOGRmNC02Y2NmMzUxYTJmZWUiLCJ0b2tlbl91c2UiOiJpZCIsImF1dGhfdGltZSI6MTYwNzA1NTQ5NSwicGhvbmVfbnVtYmVyIjoiKzkxOTk5NTE0NDkxMyIsImV4cCI6MTYwNzA1OTA5NSwiaWF0IjoxNjA3MDU1NDk1LCJmYW1pbHlfbmFtZSI6IlBhaSIsImVtYWlsIjoiaml0aHVzbTFAZ21haWwuY29tIn0.bsgAYV5yXeo94lg1zVGW6FzicuModiOFBpb-S_X-zdcJvqXN8_d6N8qE1ObLwvwKqjgXMhZg3lV3zL1mfy3ZCxNA3rQavSl_RAdKXKdNqv2M8IhStwMjw0dncWrXiLFHLQ7qefaLLkhEUqT0AU_pRN2nM_bDWYmgqKm3vZ5mTQMTnguikPih5LvCIYjGUkysT0jzzdBUs8ENXayP9ysdakUwlo89UAk-TAYJHi7gCM7kRVk0WRMRN31ayOG6IDaBt-9QtLOwQNU23yHV95W3ETi8w-LnUIFUI2aFXUJyuSN_Yvy_GwxB-adc-M69jwkjojBccp567elfEBeYPtfkYA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="business_id_1" elementType="Argument">
            <stringProp name="Argument.name">business_id_1</stringProp>
            <stringProp name="Argument.value">27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="business_id_2" elementType="Argument">
            <stringProp name="Argument.name">business_id_2</stringProp>
            <stringProp name="Argument.value">28</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="business_id_3" elementType="Argument">
            <stringProp name="Argument.name">business_id_3</stringProp>
            <stringProp name="Argument.value">29</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Hours_1" elementType="Argument">
            <stringProp name="Argument.name">Hours_1</stringProp>
            <stringProp name="Argument.value">03</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="valueDate" elementType="Argument">
            <stringProp name="Argument.name">valueDate</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Current_Day" elementType="Argument">
            <stringProp name="Argument.name">Current_Day</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P0D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Day_1" elementType="Argument">
            <stringProp name="Argument.name">Day_1</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P1D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Day_2" elementType="Argument">
            <stringProp name="Argument.name">Day_2</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Day_3" elementType="Argument">
            <stringProp name="Argument.name">Day_3</stringProp>
            <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P3D,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:\Users\ASUS\OneDrive\Desktop\UAT_Tokens_Customer_Seller.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_Business_Id" enabled="true">
        <stringProp name="CounterConfig.start">27</stringProp>
        <stringProp name="CounterConfig.end">29</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">bus_id</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_Date" enabled="true">
        <stringProp name="CounterConfig.start">0</stringProp>
        <stringProp name="CounterConfig.end">2</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">Date</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_Hours" enabled="true">
        <stringProp name="CounterConfig.start">10</stringProp>
        <stringProp name="CounterConfig.end">20</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">Hours</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_Single_Hours" enabled="true">
        <stringProp name="CounterConfig.start">3</stringProp>
        <stringProp name="CounterConfig.end">9</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">Single_Hours</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter_Time" enabled="false">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">z</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:\Users\ASUS\OneDrive\Desktop\UAT_Tokens_Customer_Seller.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1607492949000</longProp>
        <longProp name="ThreadGroup.end_time">1607492949000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_business_id is 27 and Date is Day plus 3 and Hours greater than 10" enabled="true">
          <stringProp name="IfController.condition">${business_id_1}==&quot;27&quot; &amp;&amp; &quot;${Current_Day}&quot;==&quot;${__timeShift(yyyy-MM-dd,,P3D,,)}&quot; &amp;&amp; ${Hours}&gt;=&quot;10&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TIME_SLOT_BOOKING_api" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation { book_time_slot( customer_first_name: \&quot;Abraham\&quot; customer_last_name: \&quot;Joseph\&quot; phone_country_code: \&quot;+91\&quot; customer_number:\&quot;9746201575\&quot; business_id:27 booking_date:\&quot;${__timeShift(yyyy-MM-dd,,P${Date}D,,)}\&quot; booking_time:\&quot;${Hours}:00\&quot; is_booked_for:true ) { id business_booking_id token_number confirmation_code } }&quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${UAT_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/graphql/customer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Type" elementType="Header">
                  <stringProp name="Header.name">User-Type</stringProp>
                  <stringProp name="Header.value">CUSTOMER</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">ea89ac79-0cb1-4f08-88af-4c91c7dd1398</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${UAT_Customer_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_business_id is 27 and Date is Day plus 3 and hours less than 10" enabled="true">
          <stringProp name="IfController.condition">${business_id_1}==&quot;27&quot; &amp;&amp; &quot;${Current_Day}&quot;==&quot;${__timeShift(yyyy-MM-dd,,P3D,,)}&quot; &amp;&amp; ${Hours}&lt;&quot;10&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TIME_SLOT_BOOKING_api" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation { book_time_slot( customer_first_name: \&quot;Abraham\&quot; customer_last_name: \&quot;Joseph\&quot; phone_country_code: \&quot;+91\&quot; customer_number:\&quot;9746201575\&quot; business_id:${bus_id} booking_date:\&quot;${__timeShift(yyyy-MM-dd,,P${Date}D,,)}\&quot; booking_time:\&quot;0${Single_Hours}:00\&quot; is_booked_for:true ) { id business_booking_id token_number confirmation_code } }&quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${UAT_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/graphql/customer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor_Date" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def startDate = new Date()
startDate.set(hourOfDay: 03, minute: 0)


use (groovy.time.TimeCategory) {

	80.times {
	
        def start = startDate.format(&quot;&apos;StartHour-&apos;HH&apos; StartMin-&apos;mm&quot;)
        def endDate = startDate + 15.minutes
        def end = endDate.format(&quot;&apos;EndHour-&apos;HH&apos; EndMin-&apos;mm&quot;)
        //println &quot;$start $end&quot;
        log.info(&apos;Start: &apos; + startDate.format(&apos;HH:mm&apos;))
        vars.put(&quot;Time_Slot&quot;,startDate.format(&apos;HH:mm&apos;) + &quot; &quot; + &quot;to&quot; + &quot; &quot; + endDate.format(&apos;HH:mm&apos;))
        vars.put(&quot;Slot&quot;,startDate.format(&apos;HH:mm&apos;))
        startDate = endDate
        log.info(&apos;End: &apos; + endDate.format(&apos;HH:mm&apos;))
        //vars.put(&quot;Time_Slot&quot;,startDate.format(&apos;HH:mm&apos;) +  &quot;to&quot;  + endDate.format(&apos;HH:mm&apos;))
        
}

}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Type" elementType="Header">
                  <stringProp name="Header.name">User-Type</stringProp>
                  <stringProp name="Header.value">CUSTOMER</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">ea89ac79-0cb1-4f08-88af-4c91c7dd1398</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJraWQiOiI4WWF2YjV3OVVhSHkyZmRobGFpZmNpcnUxRmlvSjljVzVzZ0J6Z3E4Tk1FPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI4ZTE5MmEwNC0zNjdmLTRmNTMtODJjOS0yYWM4NDkzMDdmZmIiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImJpcnRoZGF0ZSI6IjE5OTEtMTAtMjYiLCJnZW5kZXIiOiJNYWxlIiwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLmFwLXNvdXRoLTEuYW1hem9uYXdzLmNvbVwvYXAtc291dGgtMV9jWURPUE13c3AiLCJwaG9uZV9udW1iZXJfdmVyaWZpZWQiOnRydWUsImNvZ25pdG86dXNlcm5hbWUiOiI4ZTE5MmEwNC0zNjdmLTRmNTMtODJjOS0yYWM4NDkzMDdmZmIiLCJnaXZlbl9uYW1lIjoiSml0aHUiLCJhdWQiOiI0bThob2wzbTdmazNic2FxdDlhcGFhbGNyNSIsImV2ZW50X2lkIjoiZDg0NzkxMzUtOTYzMC00MTM1LTg4YWMtODlmODg1NTM2NjI4IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MDc0Mzg4OTIsInBob25lX251bWJlciI6Iis5MTc5MDc3Njk3ODEiLCJleHAiOjE2MDc1MjUyOTIsImlhdCI6MTYwNzQzODg5MiwiZmFtaWx5X25hbWUiOiJTZWJhc3RpYW4iLCJlbWFpbCI6ImppdGh1bWFuYWxpbEBnbWFpbC5jb20ifQ.PSng40cw2OgCGpWtThDSY4I_uIUQmBHE21kQS6i9CeFjbwFgPsPePBH8_TDzWqfwteoDH8UuNum9OgRdInKc0yhMkWjEpyf3725HYzu5tBvybkOjwxjfKroFCNY7YW1u54aaCKv3vK3i8UMavFdzSBCrepzNglgLdCtDRdrCSk_TqI9VpbbejrAzAgSG9OwSDEdh9lQJgEps8xorszDZmiSz-4mi5kUyVu7thUlU-n5IKPI9mmZdOB1hNQKI2GqZVLrkP-Ph0XJDtNDReI05XSc64rX3xkcbl_xurK_JLRCq1zROpOshRmTwbtqKUhIUbKDp88UeiqYgQeO_NpEliw </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_business_id is 27 and Date is Today" enabled="false">
          <stringProp name="IfController.condition">${business_id_1}==&quot;27&quot; &amp;&amp; &quot;${Current_Day}&quot;==&quot;${__timeShift(yyyy-MM-dd,,P0D,,)}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TIME_SLOT_BOOKING_api" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation { book_time_slot( customer_first_name: \&quot;Abraham\&quot; customer_last_name: \&quot;Joseph\&quot; phone_country_code: \&quot;+91\&quot; customer_number:\&quot;9746201575\&quot; business_id:27 booking_date:\&quot;${__timeShift(yyyy-MM-dd,,P${Date}D,,)}\&quot; booking_time:\&quot;${Hours}:00\&quot; is_booked_for:true ) { id business_booking_id token_number confirmation_code } }&quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${UAT_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/graphql/customer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Type" elementType="Header">
                  <stringProp name="Header.name">User-Type</stringProp>
                  <stringProp name="Header.value">CUSTOMER</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">ea89ac79-0cb1-4f08-88af-4c91c7dd1398</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${UAT_Customer_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_business_id is 27 and Date is Day plus 1" enabled="false">
          <stringProp name="IfController.condition">${business_id_1}==&quot;27&quot; &amp;&amp; &quot;${Current_Day}&quot;==&quot;${__timeShift(yyyy-MM-dd,,P1D,,)}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TIME_SLOT_BOOKING_api" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation { book_time_slot( customer_first_name: \&quot;Abraham\&quot; customer_last_name: \&quot;Joseph\&quot; phone_country_code: \&quot;+91\&quot; customer_number:\&quot;9746201575\&quot; business_id:27 booking_date:\&quot;${__timeShift(yyyy-MM-dd,,P${Date}D,,)}\&quot; booking_time:\&quot;${Hours}:00\&quot; is_booked_for:true ) { id business_booking_id token_number confirmation_code } }&quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${UAT_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/graphql/customer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Type" elementType="Header">
                  <stringProp name="Header.name">User-Type</stringProp>
                  <stringProp name="Header.value">CUSTOMER</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">ea89ac79-0cb1-4f08-88af-4c91c7dd1398</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${UAT_Customer_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller_business_id is 27 and Date is Day plus 2" enabled="false">
          <stringProp name="IfController.condition">${business_id_1}==&quot;27&quot; &amp;&amp; &quot;${Current_Day}&quot;==&quot;${__timeShift(yyyy-MM-dd,,P2D,,)}&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_TIME_SLOT_BOOKING_api" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;mutation { book_time_slot( customer_first_name: \&quot;Abraham\&quot; customer_last_name: \&quot;Joseph\&quot; phone_country_code: \&quot;+91\&quot; customer_number:\&quot;9746201575\&quot; business_id:27 booking_date:\&quot;${__timeShift(yyyy-MM-dd,,P${Date}D,,)}\&quot; booking_time:\&quot;${Hours}:00\&quot; is_booked_for:true ) { id business_booking_id token_number confirmation_code } }&quot;,&quot;variables&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${UAT_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/graphql/customer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="User-Type" elementType="Header">
                  <stringProp name="Header.name">User-Type</stringProp>
                  <stringProp name="Header.value">CUSTOMER</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">ea89ac79-0cb1-4f08-88af-4c91c7dd1398</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.26.8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${UAT_Customer_Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
