<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CPSA-LoadTest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Educator" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">1</stringProp>
        <stringProp name="Steps">1</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">G:\Softwares\Drivers\ChromeDriver for Version 90\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="GMM_Home_Page" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://staging.getmymessage.co&apos;);
//WDS.browser.get(&apos;https://naptest.centralus.cloudapp.azure.com/&apos;);
WDS.browser.manage().window().maximize();
//java.lang.Thread.sleep(10000);
WDS.sampleResult.sampleEnd();
		  </stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="User Login - Educator" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

java.lang.Thread.sleep(10000);
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;signInName&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).clear();
//WDS.browser.findElement(org.openqa.selenium.By.id(&quot;logonIdentifier&quot;)).sendKeys(&quot;napeducator@mailinator.com&quot;);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).sendKeys(&quot;anew2@yopmail.com&quot;);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
//WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(&quot;Cpsa1234&quot;);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(&quot;qburst@1&quot;);
//WDS.browser.findElement(org.openqa.selenium.By.id(&quot;next&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//*[@id=&apos;next&apos;]&quot;)).click();

java.lang.Thread.sleep(12000);

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/button&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/button&quot;)).click();

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/ul/li[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/ul/li[3]&quot;)).click();

WDS.sampleResult.sampleEnd();


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Log in" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1620828439000</longProp>
        <longProp name="ThreadGroup.end_time">1620828439000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Learner" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">2</stringProp>
        <stringProp name="RampUp">1</stringProp>
        <stringProp name="Steps">2</stringProp>
        <stringProp name="Hold">10</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/home/qbuser/Driver62/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Home page" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();
WDS.browser.get(&apos;https://napqa.cpsa.com&apos;);
//WDS.browser.get(&apos;https://naptest.centralus.cloudapp.azure.com/&apos;);
WDS.browser.manage().window().maximize();
//java.lang.Thread.sleep(10000);
WDS.sampleResult.sampleEnd();
		  </stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="User Login - Learner" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

java.lang.Thread.sleep(15000);
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;logonIdentifier&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;logonIdentifier&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;logonIdentifier&quot;)).clear();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;logonIdentifier&quot;)).sendKeys(&quot;qblearner@cpsab2cqa.onmicrosoft.com&quot;);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).clear();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;password&quot;)).sendKeys(&quot;Cpsa@qb.com&quot;);
//WDS.browser.findElement(org.openqa.selenium.By.id(&quot;next&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;entry&apos;]/div[4]&quot;)).click();

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Sales Associate Assessment - English" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[1]&quot;)));
//
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[1]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);


WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Sales Leadership Designation Program - English" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[2]&quot;)));
//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[2]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Module 1 - English" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[3]&quot;)));
//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[3]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Module 2 - English" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[4]&quot;)));
//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[4]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="MyTeam" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 60);

//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[6]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[6]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/my-team/&apos;);


WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSA" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSP" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[2]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[2]&quot;)).click();
	
WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSL" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[3]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Not Enrolled" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);
	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="LanguageSwitch - French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;language-switcher english&apos;]/a)[4]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;language-switcher english&apos;]/a)[4]&quot;)).click();

WDS.sampleResult.sampleEnd();


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Sales Associate Assessment - French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[1]&quot;)));
//
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[1]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);


WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Sales Leadership Designation Program -French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[2]&quot;)));
//WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
//java.lang.Thread.sleep(5000);
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;applicable-courses-content&apos;]/div/div[2]/a)[2]&quot;)).click();
//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[1]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="MyTeam-French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 60);

//wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[6]&quot;)));
//WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;menu&apos;]/ul/li/a)[6]&quot;)).click();

WDS.browser.get(&apos;https://napqa.cpsa.com/my-team/&apos;);


WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSA-French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSP-French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[2]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[2]&quot;)).click();
	
WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="CSL-French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[3]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Not Enrolled-French" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;certification-cards-wrapper&apos;]/button)[1]&quot;)).click();

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;progress-menu&apos;]/button[2]&quot;)).click();


WDS.browser.get(&apos;https://napqa.cpsa.com/learner-home/&apos;);
	

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="LanguageSwitch - English" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;language-switcher french&apos;]/a)[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;language-switcher french&apos;]/a)[3]&quot;)).click();

WDS.sampleResult.sampleEnd();


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/button&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/button&quot;)).click();

wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/ul/li[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;right-div&apos;]/ul/li[3]&quot;)).click();

WDS.sampleResult.sampleEnd();


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="false">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

WDS.browser.get(&quot;http://prelive.kidkiosk.com/app/#/login&quot;);
WDS.browser.manage().window().maximize();
WebDriverWait wait = new WebDriverWait(WDS.browser, 5000);

Thread.sleep(5000);

WebElement AdminButton= WDS.browser.findElement(By.xpath(&quot;(//li[@role=&apos;presentation&apos;]/a)[2]&quot;));
WebElement MailId= WDS.browser.findElement(By.xpath(&quot;(//input[@id=&apos;exampleInputEmail1&apos;])[2]&quot;));
WebElement Password= WDS.browser.findElement(By.xpath(&quot;(//input[@id=&apos;exampleInputPassword1&apos;])[2]&quot;));
WebElement LoginButton= WDS.browser.findElement(By.xpath(&quot;(//button[@id=&apos;admin-login-btn&apos;])[1]&quot;));
AdminButton.click();
Thread.sleep(5000);
MailId.click();
Thread.sleep(1000)
MailId.sendkeys(&quot;arunrajan@qburst.com&quot;);
Thread.sleep(1000);
//Password.click();
//Password.sendkeys(123456);
//Thread.sleep(1000);
//LoginButton.click();

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">java</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group_GMM_Load_Testing_Selenium" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.manage().window().maximize();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

java.lang.Thread.sleep(2000);
//java.lang.Thread.sleep(10000);

WDS.browser.get(&apos;https://staging.getmymessage.co/login&apos;)
//WDS.browser.findElement

//wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;signInName&quot;)));

WDS.browser.findElement(org.openqa.selenium.By.name(&quot;email&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;email&quot;)).clear();
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;email&quot;)).sendKeys(&quot;d@15.com&quot;);

WDS.browser.findElement(org.openqa.selenium.By.name(&quot;password&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;password&quot;)).clear();
WDS.browser.findElement(org.openqa.selenium.By.name(&quot;password&quot;)).sendKeys(&quot;Password@12345&quot;);

WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div/button&quot;)).click();


WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Service_Requests_Assign_Hits" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.manage().window().maximize();

var AWTException = JavaImporter(java.awt.AWTException)
var Robot = JavaImporter(java.awt.Robot)
var KeyEvent = JavaImporter(java.awt.event.KeyEvent)

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

var r = new java.awt.Robot()
//robot.keyPress(65)
//robot.keyRelease(65)
//java.lang.Thread.sleep(5000)

java.lang.Thread.sleep(3000);

// Service Area
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-2-input&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;react-select-2-input&quot;)).sendKeys(&quot;Default&quot;);
java.lang.Thread.sleep(3000);
r.keyPress(java.awt.event.KeyEvent.VK_ENTER);

// Service Category
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-3-input&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;react-select-3-input&quot;)).sendKeys(&quot;Concierge&quot;);
java.lang.Thread.sleep(3000);
r.keyPress(java.awt.event.KeyEvent.VK_ENTER);
   
// test 1, test 2 etc.
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-6-input&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;react-select-6-input&quot;)).sendKeys(&quot;test&quot;);
java.lang.Thread.sleep(3000);
r.keyPress(java.awt.event.KeyEvent.VK_ENTER);

// Service Category
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-4-input&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;react-select-4-input&quot;)).sendKeys(&quot;Miscellaneous Request&quot;);
java.lang.Thread.sleep(3000);
r.keyPress(java.awt.event.KeyEvent.VK_ENTER);

// Duplicate Request
wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)).click();
 
// Priority Level   
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-5-input&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;react-select-5-input&quot;)).sendKeys(&quot;Normal&quot;);
r.keyPress(java.awt.event.KeyEvent.VK_ENTER);

/*
// Enter details here - Claas
driver.findElement(By.className(&quot;gmm-request-window__details&quot;)).click();
*/

// Enter details here - Value
wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;gmm-request-window__details&apos;]/div/textarea&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;gmm-request-window__details&apos;]/div/textarea&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//div[@class=&apos;gmm-request-window__details&apos;]/div/textarea&quot;)).sendKeys(&quot;Hi People - Automation done&quot;);

// Click Save
wait.until(conditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)).click();

// Let Thread Sleep for 5 seconds    
java.lang.Thread.sleep(5000);

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Hit_Service_Requests_Trial" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.manage().window().maximize();

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebWDS.browserWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var robot = new java.awt.Robot();
var wait = new support_ui.WebWDS.browserWait(WDS.browser, 30000);

    java.lang.Thread.sleep(15000);
    
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-2-input&quot;)));
    WDS.browser.findElement(pkg.By.id(&quot;react-select-2-input&quot;)).sendKeys(&quot;Default&quot;);
    
    java.lang.Thread.sleep(5000)
    
    r.keyPress(KeyEvent.VK_ENTER);

    /* 
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-3-input&quot;)));
    WDS.browser.findElement(pkg.By.id(&quot;react-select-3-input&quot;)).sendKeys(&quot;Concierge&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-6-input&quot;)));
    WDS.browser.findElement(pkg.By.id(&quot;react-select-6-input&quot;)).sendKeys(&quot;test&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-4-input&quot;)));
    WDS.browser.findElement(pkg.By.id(&quot;react-select-4-input&quot;)).sendKeys(&quot;Miscellaneous Request&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)));
    WDS.browser.findElement(pkg.By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)).click();
 
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(pkg.By.id(&quot;react-select-5-input&quot;)));
    WDS.browser.findElement(pkg.By.id(&quot;react-select-5-input&quot;)).sendKeys(&quot;Normal&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    WDS.browser.findElement(pkg.pkg.By.className(&quot;gmm-request-window__details&quot;)).click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(pkg.By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)));
    WDS.browser.findElement(pkg.By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)).click();

    */
 
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Service_Request_Trial_Arjun_Dev_Trial" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.manage().window().maximize();
var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

java.lang.Thread.sleep(15000);
    wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;logonIdentifier&quot;)));

    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-2-input&quot;)));
    driver.findElement(By.id(&quot;react-select-2-input&quot;)).sendKeys(&quot;Default&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
     
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-3-input&quot;)));
    driver.findElement(By.id(&quot;react-select-3-input&quot;)).sendKeys(&quot;Concierge&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-6-input&quot;)));
    driver.findElement(By.id(&quot;react-select-6-input&quot;)).sendKeys(&quot;test&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-4-input&quot;)));
    driver.findElement(By.id(&quot;react-select-4-input&quot;)).sendKeys(&quot;Miscellaneous Request&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)));
    driver.findElement(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)).click();
 
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-5-input&quot;)));
    driver.findElement(By.id(&quot;react-select-5-input&quot;)).sendKeys(&quot;Normal&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    driver.findElement(By.className(&quot;gmm-request-window__details&quot;)).click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)));
    driver.findElement(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)).click();


WDS.sampleResult.sampleEnd()

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Service_Request_Trial_Arjun_Dev_Original_Selenium_Trial" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

WDS.browser.manage().window().maximize();
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class App
{
public static WebDriver driver;
    public static void main( String[] args ) throws InterruptedException, AWTException
    {
    Robot r = new Robot();
   
    System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;/home/qbuser/Downloads/chromedriver_linux64/chromedriver&quot;);
    driver = new ChromeDriver();
    WebDriverWait wait = new WebDriverWait(driver, 20);
    driver.get(&quot;https://staging.getmymessage.co/login&quot;);
    //driver.manage().window().maximize();
    //wait.until(ExpectedConditions.visibilityOfElementLocated
    WebElement username = driver.findElement(By.name(&quot;email&quot;));
    username.sendKeys(&quot;d@15.com&quot;);

    WebElement password = driver.findElement(By.name(&quot;password&quot;));
    password.sendKeys(&quot;Password@12345&quot;);

    WebElement Click_SignIn = driver.findElement(By.xpath(&quot;//div/button&quot;));
    Click_SignIn.click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-2-input&quot;)));
    driver.findElement(By.id(&quot;react-select-2-input&quot;)).sendKeys(&quot;Default&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
     
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-3-input&quot;)));
    driver.findElement(By.id(&quot;react-select-3-input&quot;)).sendKeys(&quot;Concierge&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-6-input&quot;)));
    driver.findElement(By.id(&quot;react-select-6-input&quot;)).sendKeys(&quot;test&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-4-input&quot;)));
    driver.findElement(By.id(&quot;react-select-4-input&quot;)).sendKeys(&quot;Miscellaneous Request&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)));
    driver.findElement(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)).click();
 
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-5-input&quot;)));
    driver.findElement(By.id(&quot;react-select-5-input&quot;)).sendKeys(&quot;Normal&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    driver.findElement(By.className(&quot;gmm-request-window__details&quot;)).click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)));
    driver.findElement(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)).click();
 
    }
}

WDS.sampleResult.sampleEnd()

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler_Trial" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

var ui = JavaImporter(org.openqa.selenium.support.ui) 
var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, 30000);

java.lang.Thread.sleep(10000);
wait.until(conditions.visibilityOfElementLocated(pkg.By.id(&quot;signInName&quot;)));
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).click();
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).clear();
//WDS.browser.findElement(org.openqa.selenium.By.id(&quot;logonIdentifier&quot;)).sendKeys(&quot;napeducator@mailinator.com&quot;);
WDS.browser.findElement(org.openqa.selenium.By.id(&quot;signInName&quot;)).sendKeys(&quot;anew2@yopmail.com&quot;);


WDS.browser.findElement(org.openqa.selenium.By.xpath(&quot;//*[@id=&apos;next&apos;]&quot;)).click();

java.lang.Thread.sleep(12000);


WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler_Trial" enabled="false">
          <stringProp name="WebDriverSampler.script">WDS.sampleResult.sampleStart()

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class App
{
public static WebDriver driver;
    public static void main( String[] args ) throws InterruptedException, AWTException
    {
    Robot r = new Robot();
   
    System.setProperty(&quot;webdriver.chrome.driver&quot;, &quot;/home/qbuser/Downloads/chromedriver_linux64/chromedriver&quot;);
    driver = new ChromeDriver();
    WebDriverWait wait = new WebDriverWait(driver, 20);
    driver.get(&quot;https://staging.getmymessage.co/login&quot;);
    //driver.manage().window().maximize();
    //wait.until(ExpectedConditions.visibilityOfElementLocated
    WebElement username = driver.findElement(By.name(&quot;email&quot;));
    username.sendKeys(&quot;d@15.com&quot;);

    WebElement password = driver.findElement(By.name(&quot;password&quot;));
    password.sendKeys(&quot;Password@12345&quot;);

    WebElement Click_SignIn = driver.findElement(By.xpath(&quot;//div/button&quot;));
    Click_SignIn.click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-2-input&quot;)));
    driver.findElement(By.id(&quot;react-select-2-input&quot;)).sendKeys(&quot;Default&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
     
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-3-input&quot;)));
    driver.findElement(By.id(&quot;react-select-3-input&quot;)).sendKeys(&quot;Concierge&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-6-input&quot;)));
    driver.findElement(By.id(&quot;react-select-6-input&quot;)).sendKeys(&quot;test&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-4-input&quot;)));
    driver.findElement(By.id(&quot;react-select-4-input&quot;)).sendKeys(&quot;Miscellaneous Request&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)));
    driver.findElement(By.xpath(&quot;//div[@class=&apos;gmm-modal&apos;]/div/div/button&quot;)).click();
 
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;react-select-5-input&quot;)));
    driver.findElement(By.id(&quot;react-select-5-input&quot;)).sendKeys(&quot;Normal&quot;);
    r.keyPress(KeyEvent.VK_ENTER);
   
    driver.findElement(By.className(&quot;gmm-request-window__details&quot;)).click();
   
    wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)));
    driver.findElement(By.xpath(&quot;(//div[@class=&apos;gmm-request-window__buttons&apos;]/button)[3]&quot;)).click();
 
    }
}


WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
