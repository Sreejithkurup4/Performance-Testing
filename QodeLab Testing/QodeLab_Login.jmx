<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="QodeLab_Login" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="QodeLab_Login" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AuthServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">AuthServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AuthServerDomain" elementType="Argument">
              <stringProp name="Argument.name">AuthServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User Creds CSV" enabled="true">
          <stringProp name="filename">G:\apache-jmeter-3.3\apache-jmeter-3.3\bin\Login_Trial_QodeLab_prod.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">username,password</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Controller" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="OpenIdConnect.nonce.${nonce_name}" elementType="Cookie" testname="OpenIdConnect.nonce.${nonce_name}">
                <stringProp name="Cookie.value">${nonce}</stringProp>
                <stringProp name="Cookie.domain">.qodelab.qburst.build</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">true</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Page Redirect" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ApplicationDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Authorization server redirects the user to the  login page with signin identifier in query string.
Make sure to set the nonce cookie value to a variable which is required for the final POST request</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReturnUrl Query String Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">loginQueryString</stringProp>
              <stringProp name="RegexExtractor.regex">https://${AuthServerDomain}/Account/Login?(.*$)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">no_url</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Anti forgery tken extractor" enabled="true">
              <stringProp name="HtmlExtractor.refname">requestVerificationToken</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=__RequestVerificationToken]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReturnUrl Query String Extractor_original" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">loginQueryString</stringProp>
              <stringProp name="RegexExtractor.regex">http://${AuthServerDomain}:5001/Account/Login?(.*$)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">no_url</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Submit_original" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">login</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                </elementProp>
                <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${requestVerificationToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
                </elementProp>
                <elementProp name="RememberLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RememberLogin</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${AuthServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Account/Login${loginQueryString}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Submits the username and password along with the xsrf extracted from the login page. 
This POST requires the cookies to be set properly. If the call is success, then an GET call will be made internally to the autorize endpoint. 
The result of that call will have the id_token, access_token and otherd etails which has to be POST&apos;ed to the url metioned in the response.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Access Token Extractor" enabled="true">
              <stringProp name="HtmlExtractor.refname">token</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=access_token]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="OpenIdConnect.nonce.${nonce_name}" elementType="Cookie" testname="OpenIdConnect.nonce.${nonce_name}">
                  <stringProp name="Cookie.value">${nonce}</stringProp>
                  <stringProp name="Cookie.domain">.qodelab.qburst.build</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">true</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">x</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String accessToken=&quot;${token}&quot;;
//FileWriter fstream = new FileWriter(&quot;F://login_result.csv&quot;,true);
FileWriter fstream = new FileWriter(&quot;F://QodeLab_Trial//Token//login_result_26_June_2020_prod_New.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C://Users//Sreejith Kurup//Desktop//QodeLab//Trial//login_result.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C://Users//Sreejith Kurup//Desktop//QodeLab//Trial//login_result${x}.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C:\\Users\\Sreejith Kurup\\Desktop\\QodeLab\\Trial\\login_result.csv&quot;,false);
fstream.write(accessToken+&quot;\n&quot;);
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Submit" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">user002@LE-2020</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">I4i7ynXB</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="button" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">login</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">button</stringProp>
                </elementProp>
                <elementProp name="__RequestVerificationToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${requestVerificationToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">__RequestVerificationToken</stringProp>
                </elementProp>
                <elementProp name="RememberLogin" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">RememberLogin</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">qodelab.qburst.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/Account/Login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Submits the username and password along with the xsrf extracted from the login page. 
This POST requires the cookies to be set properly. If the call is success, then an GET call will be made internally to the autorize endpoint. 
The result of that call will have the id_token, access_token and otherd etails which has to be POST&apos;ed to the url metioned in the response.</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Access Token Extractor" enabled="true">
              <stringProp name="HtmlExtractor.refname">token</stringProp>
              <stringProp name="HtmlExtractor.expr">[name=access_token]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="OpenIdConnect.nonce.${nonce_name}" elementType="Cookie" testname="OpenIdConnect.nonce.${nonce_name}">
                  <stringProp name="Cookie.value">${nonce}</stringProp>
                  <stringProp name="Cookie.domain">.qodelab.qburst.build</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">true</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">x</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String accessToken=&quot;${token}&quot;;
//FileWriter fstream = new FileWriter(&quot;F://login_result.csv&quot;,true);
FileWriter fstream = new FileWriter(&quot;F://QodeLab_Trial//Token//login_result_25_June_2020_prod.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C://Users//Sreejith Kurup//Desktop//QodeLab//Trial//login_result.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C://Users//Sreejith Kurup//Desktop//QodeLab//Trial//login_result${x}.csv&quot;,true);
//FileWriter fstream = new FileWriter(&quot;C:\\Users\\Sreejith Kurup\\Desktop\\QodeLab\\Trial\\login_result.csv&quot;,false);
fstream.write(accessToken+&quot;\n&quot;);
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">5</stringProp>
        <stringProp name="RampUp">0</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">7200</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Exam Start" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <longProp name="ThreadGroup.start_time">1588589948000</longProp>
        <longProp name="ThreadGroup.end_time">1588589948000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="AuthServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">AuthServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AuthServerDomain" elementType="Argument">
              <stringProp name="Argument.name">AuthServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Exam Controller" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start Exam" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${AuthServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agg/exams/candidatestarted</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">C:\Users\Sreejith Kurup\Desktop\IPConfig.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compiler Test_C Compiler" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Prod_Test\Token.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APIServerDomain" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="C Compiler" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryWEbnpnyNdp6gBnEO</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
void do_work(int n, int K, int*  input, int** result){&#xd;
   &#xd;
   // Below example shows how to return result.&#xd;
   // Exaple if result = {{1,2}, {3,4} }&#xd;
     result[0][0] = 1;&#xd;
     result[0][1] = 2;&#xd;
     result[1][0] = 3;&#xd;
     result[1][1] = 4;&#xd;
}&#xd;
&#xd;
 int ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     int **p;&#xd;
     p  = malloc(sizeof(int*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(int*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
 &#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    int n = 7;&#xd;
    int input[] = {1,2,3,4,5,6,7};&#xd;
    int K = 10;&#xd;
    &#xd;
    &#xd;
    // Result is is a 2D array with result[n/2][2] - n/2 is the max combination possible and 2 is the max lenth for each array&#xd;
    &#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int **result;&#xd;
    result = initialize_max_2d_array(n/2, 2);&#xd;
    &#xd;
    do_work(n,K, input,result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     for(int i = 0; i &lt; n/2; i++)&#xd;
    { &#xd;
        printf(&quot;(%d,%d) &quot;, *( *(result + i)), *( *(result + i) + 1) );&#xd;
&#xd;
    }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.ipSource">${ip}</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://qodelab.qburst.com/api/assessment/compiler/execute/C" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="fileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fileName</stringProp>
                <stringProp name="Argument.value">Qdb14342beac1471ea35715aaa599c71e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="questionId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">questionId</stringProp>
                <stringProp name="Argument.value">db14342b-eac1-471e-a357-15aaa599c71e</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="codeFile" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">codeFile</stringProp>
                <stringProp name="Argument.value">#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
#include &lt;time.h&gt; &#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
char ** do_work(char* input, char **result){&#xd;
    // Below example shows how to return result.&#xd;
    // Exaple if result = abc , d&#xd;
   &#xd;
    result[0] =  &quot;abc&quot;;&#xd;
    result[1] =  &quot;d&quot;;&#xd;
}&#xd;
&#xd;
char ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     char **p;&#xd;
     p  = malloc(sizeof(char*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(char*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
 &#xd;
&#xd;
&#xd;
 &#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    char *input = &quot;asasds&quot;;&#xd;
&#xd;
    // Result is is a 2D array with result[n*(n+1)/2][n] - n*(n+1)/2 isthe max number of non-empty substrings of string with lenth n and n is the max length of sub-string possible&#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int n = strlen(input);&#xd;
    char **result;&#xd;
    result = initialize_max_2d_array(n*(n+1)/2, n);&#xd;
    &#xd;
    do_work(input, result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     &#xd;
     while(**result != &apos;\0&apos;) {&#xd;
         printf(&quot;%s &quot;,  *(result) ); &#xd;
         result++;&#xd;
     }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="arguments" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">arguments</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">qodelab.qburst.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/assessment/compiler/execute/C</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IkVDQzE1QTAzQUNERjM2Mjk4QTk5MTE4RTU1MjhCNjIwMEMxMEUzMTkiLCJ0eXAiOiJKV1QiLCJ4NXQiOiI3TUZhQTZ6Zk5pbUttUkdPVlNpMklBd1E0eGsifQ.eyJuYmYiOjE1OTMxMTIxMDIsImV4cCI6MTU5MzEzMzcwMiwiaXNzIjoicW9kZWxhYi5jb20iLCJhdWQiOlsicW9kZWxhYi5jb20vcmVzb3VyY2VzIiwiUW9kZUxhYkFwaSJdLCJjbGllbnRfaWQiOiJRQnVyc3QuQ29kZUxhYiIsInN1YiI6InVzZXIwMDFATENFLTIwMjAiLCJhdXRoX3RpbWUiOjE1OTMxMTIxMDEsImlkcCI6ImxvY2FsIiwiRXhhbUlkIjoiNTY3YjNmYWYtMTlhZC00MTI5LWE3ZmMtN2I0Mjk1OTMzMzVhIiwiZW1haWwiOiJ1c2VyMDAxQExDRS0yMDIwIiwic2NvcGUiOlsib3BlbmlkIiwicHJvZmlsZSIsImlkZW50aXR5LnVzZXIucm9sZXMiLCJhcGkuYXV0aGVudGljYXRpb24iLCJhcGkudXNlci5yb2xlcyJdLCJhbXIiOlsicHdkIl19.l3hRnmZuvCjJNaCHGpLbZ_rOOME7grIpGp1CeLQwnQIJ62mtU7VKwc_mHT2eT7yU04STgtISFKqPuo1PqHeWJqBxeiOqPPCZVyI0z9SU7bsdocIVJRx3Beys1u1IK0CW_kTy3B5UHy2fwMKV2bMUd0i4jyy0aBgNvBl5anhqrrKWIx16xjpQHV49zfK2ub761Gene0y2N5zRnwlSri5Nok9TtId12-sePqZxPaMn7o7YkrmypPSwWn5ZNY8fvcgQ_9BfCwXJcQ2UoZ4jU7-Ol5fN37iPHRDDUHmPVUDoC3fLZd7Xjsd2ahCqb3dNNMofFXuYmdbQl6Yi_lvm_dNuQg</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryWEbnpnyNdp6gBnEO</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarywN8597zqcwZyftxf</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;bits/stdc++.h&gt; &#xd;
#include &lt;unordered_set&gt; &#xd;
#include &lt;vector&gt;&#xd;
&#xd;
using namespace std; &#xd;
  &#xd;
vector&lt;vector&lt;int&gt; &gt;  DoWork(int input[], int n, int k) &#xd;
{ &#xd;
    // Below example shows how to return result.&#xd;
    // Exaple suppose result = {{1,2}, {3,4} }&#xd;
    vector&lt;vector&lt;int&gt; &gt; result;&#xd;
    &#xd;
    vector&lt;int&gt; pair = {1,9};&#xd;
    result.push_back(pair);&#xd;
         &#xd;
    pair = {3,7};&#xd;
    result.push_back(pair);&#xd;
    &#xd;
    return result;&#xd;
} &#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
// Driver function to test the above function &#xd;
int main() &#xd;
{ &#xd;
    // Edit the vals to try differect combinations&#xd;
    int input[] = {-1, 5, 7, 1, 5, 3, 3, 1,3} ; &#xd;
    int n = 9; &#xd;
    int k = 6; &#xd;
    &#xd;
    vector&lt;vector&lt;int&gt; &gt; result = DoWork(input, n, k);&#xd;
    if (result.empty()) {&#xd;
        cout &lt;&lt; &quot;None&quot;;&#xd;
    } else {&#xd;
        &#xd;
        for (unsigned  int i = 0; i &lt; result.size(); i++) {&#xd;
             cout &lt;&lt; &quot;(&quot; &lt;&lt; result[i][0] &lt;&lt; &quot;, &quot; &lt;&lt; result[i][1] &lt;&lt; &quot;) &quot; ;  &#xd;
        }&#xd;
              &#xd;
              cout&lt;&lt;&quot;\n&quot;; &#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
    return 0; &#xd;
}&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/CPP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Java Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Java Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
public class CLASS_NAME_PLCHOLDR&#xd;
{&#xd;
	/*&#xd;
	   Write your code inside this function.&#xd;
	   DO NOT modify the method signature&#xd;
	   DO NOT modify/remove any system generated code/comments&#xd;
	*/&#xd;
    private static int[] DoWork(int numberOfStocks, int[] prices)&#xd;
    {&#xd;
     int[] result = new int[]{24, 40};&#xd;
&#xd;
     return result;&#xd;
    }&#xd;
&#xd;
    public static void main(String[] args)&#xd;
    {&#xd;
&#xd;
        //You may change the input values for testing&#xd;
       int[] prices = new int[] {45, 24, 35, 31, 40, 38, 11};&#xd;
       int numberOfStocks = 7;&#xd;
&#xd;
        int[] result = DoWork(numberOfStocks, prices);&#xd;
        System.out.println(result[0]);&#xd;
        System.out.println(result[1]);&#xd;
&#xd;
        //DO NOT remove/modify the below line&#xd;
        //PLCHLDR_TSTCASE_EXE//&#xd;
&#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASES//&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Java</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PHP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryMnmMBaE3mjYm1cKB</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PHP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
&lt;?php&#xd;
&#xd;
/*&#xd;
 * Write your code inside this function.&#xd;
 * DO NOT modify the method signature&#xd;
 * DO NOT modify/remove any system generated code/comments&#xd;
 *&#xd;
 * $input - Input array&#xd;
 * $n - Number of elements in the array&#xd;
 * $k - Target sum&#xd;
 *&#xd;
 * Return a 2-dimensional array with the pairs in addition to printing the result&#xd;
 * Return an empty array if there is no pair&#xd;
*/&#xd;
function DoWork($input, $n, $k) {&#xd;
    //Below example shows how to return result&#xd;
    //Exaple if result = {{1,2}, {3,4} }&#xd;
    return [[1,4], [2,3]];&#xd;
}&#xd;
&#xd;
//You may change the input values for testing&#xd;
$input = [1, 2, 3, 4, 5, 6];&#xd;
$n = 6;&#xd;
$k = 5;&#xd;
$result = DoWork($input, $n, $k);&#xd;
echo &apos;Pairs whose sum is &apos;  . $k . &apos;: &apos;;&#xd;
foreach ($result as $pair) {&#xd;
    echo &quot;(&quot; . $pair[0] . &apos;,&apos; . $pair[1] . &quot;) &quot;;&#xd;
}&#xd;
&#xd;
//DO NOT remove/modify the lines below&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
//PLCHLDR_TSTCASE_EXE//&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/PHP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Python Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Python Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#Write your code inside this function.&#xd;
#DO NOT modify the method signature&#xd;
#DO NOT modify/remove any system generated code/comments&#xd;
&#xd;
def DoWork(input):&#xd;
    return &quot;Hello &quot; + input&#xd;
&#xd;
# DO NOT remove/modify the below line&#xd;
# PLCHLDR_TSTCASES#&#xd;
&#xd;
# You may change the input values for testing&#xd;
input = &quot;World&quot;&#xd;
&#xd;
result = DoWork(input)&#xd;
#DO NOT remove/modify the below line&#xd;
#PLCHLDR_TSTCASE_EXE#&#xd;
&#xd;
print(result)&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Python</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_C Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_C Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_C Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compiler Test_CPP Compiler" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Prod_Test\Token.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\JMeter\apache-jmeter-5.2.1\bin\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APIServerDomain" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="" elementType="Argument">
              <stringProp name="Argument.name"></stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="C Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
void do_work(int n, int K, int*  input, int** result){&#xd;
   &#xd;
   // Below example shows how to return result.&#xd;
   // Exaple if result = {{1,2}, {3,4} }&#xd;
     result[0][0] = 1;&#xd;
     result[0][1] = 2;&#xd;
     result[1][0] = 3;&#xd;
     result[1][1] = 4;&#xd;
}&#xd;
&#xd;
 int ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     int **p;&#xd;
     p  = malloc(sizeof(int*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(int*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
 &#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    int n = 7;&#xd;
    int input[] = {1,2,3,4,5,6,7};&#xd;
    int K = 10;&#xd;
    &#xd;
    &#xd;
    // Result is is a 2D array with result[n/2][2] - n/2 is the max combination possible and 2 is the max lenth for each array&#xd;
    &#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int **result;&#xd;
    result = initialize_max_2d_array(n/2, 2);&#xd;
    &#xd;
    do_work(n,K, input,result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     for(int i = 0; i &lt; n/2; i++)&#xd;
    { &#xd;
        printf(&quot;(%d,%d) &quot;, *( *(result + i)), *( *(result + i) + 1) );&#xd;
&#xd;
    }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPP Compiler" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarywN8597zqcwZyftxf</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;bits/stdc++.h&gt; &#xd;
#include &lt;unordered_set&gt; &#xd;
#include &lt;vector&gt;&#xd;
&#xd;
using namespace std; &#xd;
  &#xd;
vector&lt;vector&lt;int&gt; &gt;  DoWork(int input[], int n, int k) &#xd;
{ &#xd;
    // Below example shows how to return result.&#xd;
    // Exaple suppose result = {{1,2}, {3,4} }&#xd;
    vector&lt;vector&lt;int&gt; &gt; result;&#xd;
    &#xd;
    vector&lt;int&gt; pair = {1,9};&#xd;
    result.push_back(pair);&#xd;
         &#xd;
    pair = {3,7};&#xd;
    result.push_back(pair);&#xd;
    &#xd;
    return result;&#xd;
} &#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
// Driver function to test the above function &#xd;
int main() &#xd;
{ &#xd;
    // Edit the vals to try differect combinations&#xd;
    int input[] = {-1, 5, 7, 1, 5, 3, 3, 1,3} ; &#xd;
    int n = 9; &#xd;
    int k = 6; &#xd;
    &#xd;
    vector&lt;vector&lt;int&gt; &gt; result = DoWork(input, n, k);&#xd;
    if (result.empty()) {&#xd;
        cout &lt;&lt; &quot;None&quot;;&#xd;
    } else {&#xd;
        &#xd;
        for (unsigned  int i = 0; i &lt; result.size(); i++) {&#xd;
             cout &lt;&lt; &quot;(&quot; &lt;&lt; result[i][0] &lt;&lt; &quot;, &quot; &lt;&lt; result[i][1] &lt;&lt; &quot;) &quot; ;  &#xd;
        }&#xd;
              &#xd;
              cout&lt;&lt;&quot;\n&quot;; &#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
    return 0; &#xd;
}&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/CPP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.ipSource">${ip}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Java Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Java Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
public class CLASS_NAME_PLCHOLDR&#xd;
{&#xd;
	/*&#xd;
	   Write your code inside this function.&#xd;
	   DO NOT modify the method signature&#xd;
	   DO NOT modify/remove any system generated code/comments&#xd;
	*/&#xd;
    private static int[] DoWork(int numberOfStocks, int[] prices)&#xd;
    {&#xd;
     int[] result = new int[]{24, 40};&#xd;
&#xd;
     return result;&#xd;
    }&#xd;
&#xd;
    public static void main(String[] args)&#xd;
    {&#xd;
&#xd;
        //You may change the input values for testing&#xd;
       int[] prices = new int[] {45, 24, 35, 31, 40, 38, 11};&#xd;
       int numberOfStocks = 7;&#xd;
&#xd;
        int[] result = DoWork(numberOfStocks, prices);&#xd;
        System.out.println(result[0]);&#xd;
        System.out.println(result[1]);&#xd;
&#xd;
        //DO NOT remove/modify the below line&#xd;
        //PLCHLDR_TSTCASE_EXE//&#xd;
&#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASES//&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Java</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PHP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryMnmMBaE3mjYm1cKB</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PHP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
&lt;?php&#xd;
&#xd;
/*&#xd;
 * Write your code inside this function.&#xd;
 * DO NOT modify the method signature&#xd;
 * DO NOT modify/remove any system generated code/comments&#xd;
 *&#xd;
 * $input - Input array&#xd;
 * $n - Number of elements in the array&#xd;
 * $k - Target sum&#xd;
 *&#xd;
 * Return a 2-dimensional array with the pairs in addition to printing the result&#xd;
 * Return an empty array if there is no pair&#xd;
*/&#xd;
function DoWork($input, $n, $k) {&#xd;
    //Below example shows how to return result&#xd;
    //Exaple if result = {{1,2}, {3,4} }&#xd;
    return [[1,4], [2,3]];&#xd;
}&#xd;
&#xd;
//You may change the input values for testing&#xd;
$input = [1, 2, 3, 4, 5, 6];&#xd;
$n = 6;&#xd;
$k = 5;&#xd;
$result = DoWork($input, $n, $k);&#xd;
echo &apos;Pairs whose sum is &apos;  . $k . &apos;: &apos;;&#xd;
foreach ($result as $pair) {&#xd;
    echo &quot;(&quot; . $pair[0] . &apos;,&apos; . $pair[1] . &quot;) &quot;;&#xd;
}&#xd;
&#xd;
//DO NOT remove/modify the lines below&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
//PLCHLDR_TSTCASE_EXE//&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/PHP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Python Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Python Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#Write your code inside this function.&#xd;
#DO NOT modify the method signature&#xd;
#DO NOT modify/remove any system generated code/comments&#xd;
&#xd;
def DoWork(input):&#xd;
    return &quot;Hello &quot; + input&#xd;
&#xd;
# DO NOT remove/modify the below line&#xd;
# PLCHLDR_TSTCASES#&#xd;
&#xd;
# You may change the input values for testing&#xd;
input = &quot;World&quot;&#xd;
&#xd;
result = DoWork(input)&#xd;
#DO NOT remove/modify the below line&#xd;
#PLCHLDR_TSTCASE_EXE#&#xd;
&#xd;
print(result)&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Python</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_CPP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_CPP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_CPP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compiler Test_Java Compiler" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Prod_Test\Token.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\JMeter\apache-jmeter-5.2.1\bin\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APIServerDomain" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="C Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
void do_work(int n, int K, int*  input, int** result){&#xd;
   &#xd;
   // Below example shows how to return result.&#xd;
   // Exaple if result = {{1,2}, {3,4} }&#xd;
     result[0][0] = 1;&#xd;
     result[0][1] = 2;&#xd;
     result[1][0] = 3;&#xd;
     result[1][1] = 4;&#xd;
}&#xd;
&#xd;
 int ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     int **p;&#xd;
     p  = malloc(sizeof(int*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(int*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
 &#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    int n = 7;&#xd;
    int input[] = {1,2,3,4,5,6,7};&#xd;
    int K = 10;&#xd;
    &#xd;
    &#xd;
    // Result is is a 2D array with result[n/2][2] - n/2 is the max combination possible and 2 is the max lenth for each array&#xd;
    &#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int **result;&#xd;
    result = initialize_max_2d_array(n/2, 2);&#xd;
    &#xd;
    do_work(n,K, input,result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     for(int i = 0; i &lt; n/2; i++)&#xd;
    { &#xd;
        printf(&quot;(%d,%d) &quot;, *( *(result + i)), *( *(result + i) + 1) );&#xd;
&#xd;
    }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarywN8597zqcwZyftxf</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;bits/stdc++.h&gt; &#xd;
#include &lt;unordered_set&gt; &#xd;
#include &lt;vector&gt;&#xd;
&#xd;
using namespace std; &#xd;
  &#xd;
vector&lt;vector&lt;int&gt; &gt;  DoWork(int input[], int n, int k) &#xd;
{ &#xd;
    // Below example shows how to return result.&#xd;
    // Exaple suppose result = {{1,2}, {3,4} }&#xd;
    vector&lt;vector&lt;int&gt; &gt; result;&#xd;
    &#xd;
    vector&lt;int&gt; pair = {1,9};&#xd;
    result.push_back(pair);&#xd;
         &#xd;
    pair = {3,7};&#xd;
    result.push_back(pair);&#xd;
    &#xd;
    return result;&#xd;
} &#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
// Driver function to test the above function &#xd;
int main() &#xd;
{ &#xd;
    // Edit the vals to try differect combinations&#xd;
    int input[] = {-1, 5, 7, 1, 5, 3, 3, 1,3} ; &#xd;
    int n = 9; &#xd;
    int k = 6; &#xd;
    &#xd;
    vector&lt;vector&lt;int&gt; &gt; result = DoWork(input, n, k);&#xd;
    if (result.empty()) {&#xd;
        cout &lt;&lt; &quot;None&quot;;&#xd;
    } else {&#xd;
        &#xd;
        for (unsigned  int i = 0; i &lt; result.size(); i++) {&#xd;
             cout &lt;&lt; &quot;(&quot; &lt;&lt; result[i][0] &lt;&lt; &quot;, &quot; &lt;&lt; result[i][1] &lt;&lt; &quot;) &quot; ;  &#xd;
        }&#xd;
              &#xd;
              cout&lt;&lt;&quot;\n&quot;; &#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
    return 0; &#xd;
}&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/CPP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Java Compiler" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Java Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
public class CLASS_NAME_PLCHOLDR&#xd;
{&#xd;
	/*&#xd;
	   Write your code inside this function.&#xd;
	   DO NOT modify the method signature&#xd;
	   DO NOT modify/remove any system generated code/comments&#xd;
	*/&#xd;
    private static int[] DoWork(int numberOfStocks, int[] prices)&#xd;
    {&#xd;
     int[] result = new int[]{24, 40};&#xd;
&#xd;
     return result;&#xd;
    }&#xd;
&#xd;
    public static void main(String[] args)&#xd;
    {&#xd;
&#xd;
        //You may change the input values for testing&#xd;
       int[] prices = new int[] {45, 24, 35, 31, 40, 38, 11};&#xd;
       int numberOfStocks = 7;&#xd;
&#xd;
        int[] result = DoWork(numberOfStocks, prices);&#xd;
        System.out.println(result[0]);&#xd;
        System.out.println(result[1]);&#xd;
&#xd;
        //DO NOT remove/modify the below line&#xd;
        //PLCHLDR_TSTCASE_EXE//&#xd;
&#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASES//&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Java</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.ipSource">${ip}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PHP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryMnmMBaE3mjYm1cKB</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PHP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
&lt;?php&#xd;
&#xd;
/*&#xd;
 * Write your code inside this function.&#xd;
 * DO NOT modify the method signature&#xd;
 * DO NOT modify/remove any system generated code/comments&#xd;
 *&#xd;
 * $input - Input array&#xd;
 * $n - Number of elements in the array&#xd;
 * $k - Target sum&#xd;
 *&#xd;
 * Return a 2-dimensional array with the pairs in addition to printing the result&#xd;
 * Return an empty array if there is no pair&#xd;
*/&#xd;
function DoWork($input, $n, $k) {&#xd;
    //Below example shows how to return result&#xd;
    //Exaple if result = {{1,2}, {3,4} }&#xd;
    return [[1,4], [2,3]];&#xd;
}&#xd;
&#xd;
//You may change the input values for testing&#xd;
$input = [1, 2, 3, 4, 5, 6];&#xd;
$n = 6;&#xd;
$k = 5;&#xd;
$result = DoWork($input, $n, $k);&#xd;
echo &apos;Pairs whose sum is &apos;  . $k . &apos;: &apos;;&#xd;
foreach ($result as $pair) {&#xd;
    echo &quot;(&quot; . $pair[0] . &apos;,&apos; . $pair[1] . &quot;) &quot;;&#xd;
}&#xd;
&#xd;
//DO NOT remove/modify the lines below&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
//PLCHLDR_TSTCASE_EXE//&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/PHP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Python Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Python Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#Write your code inside this function.&#xd;
#DO NOT modify the method signature&#xd;
#DO NOT modify/remove any system generated code/comments&#xd;
&#xd;
def DoWork(input):&#xd;
    return &quot;Hello &quot; + input&#xd;
&#xd;
# DO NOT remove/modify the below line&#xd;
# PLCHLDR_TSTCASES#&#xd;
&#xd;
# You may change the input values for testing&#xd;
input = &quot;World&quot;&#xd;
&#xd;
result = DoWork(input)&#xd;
#DO NOT remove/modify the below line&#xd;
#PLCHLDR_TSTCASE_EXE#&#xd;
&#xd;
print(result)&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Python</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Java Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_Java Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_Java Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compiler Test_PHP Compiler" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Prod_Test\Token.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\JMeter\apache-jmeter-5.2.1\bin\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APIServerDomain" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="C Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
void do_work(int n, int K, int*  input, int** result){&#xd;
   &#xd;
   // Below example shows how to return result.&#xd;
   // Exaple if result = {{1,2}, {3,4} }&#xd;
     result[0][0] = 1;&#xd;
     result[0][1] = 2;&#xd;
     result[1][0] = 3;&#xd;
     result[1][1] = 4;&#xd;
}&#xd;
&#xd;
 int ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     int **p;&#xd;
     p  = malloc(sizeof(int*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(int*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
 &#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    int n = 7;&#xd;
    int input[] = {1,2,3,4,5,6,7};&#xd;
    int K = 10;&#xd;
    &#xd;
    &#xd;
    // Result is is a 2D array with result[n/2][2] - n/2 is the max combination possible and 2 is the max lenth for each array&#xd;
    &#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int **result;&#xd;
    result = initialize_max_2d_array(n/2, 2);&#xd;
    &#xd;
    do_work(n,K, input,result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     for(int i = 0; i &lt; n/2; i++)&#xd;
    { &#xd;
        printf(&quot;(%d,%d) &quot;, *( *(result + i)), *( *(result + i) + 1) );&#xd;
&#xd;
    }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarywN8597zqcwZyftxf</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;bits/stdc++.h&gt; &#xd;
#include &lt;unordered_set&gt; &#xd;
#include &lt;vector&gt;&#xd;
&#xd;
using namespace std; &#xd;
  &#xd;
vector&lt;vector&lt;int&gt; &gt;  DoWork(int input[], int n, int k) &#xd;
{ &#xd;
    // Below example shows how to return result.&#xd;
    // Exaple suppose result = {{1,2}, {3,4} }&#xd;
    vector&lt;vector&lt;int&gt; &gt; result;&#xd;
    &#xd;
    vector&lt;int&gt; pair = {1,9};&#xd;
    result.push_back(pair);&#xd;
         &#xd;
    pair = {3,7};&#xd;
    result.push_back(pair);&#xd;
    &#xd;
    return result;&#xd;
} &#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
// Driver function to test the above function &#xd;
int main() &#xd;
{ &#xd;
    // Edit the vals to try differect combinations&#xd;
    int input[] = {-1, 5, 7, 1, 5, 3, 3, 1,3} ; &#xd;
    int n = 9; &#xd;
    int k = 6; &#xd;
    &#xd;
    vector&lt;vector&lt;int&gt; &gt; result = DoWork(input, n, k);&#xd;
    if (result.empty()) {&#xd;
        cout &lt;&lt; &quot;None&quot;;&#xd;
    } else {&#xd;
        &#xd;
        for (unsigned  int i = 0; i &lt; result.size(); i++) {&#xd;
             cout &lt;&lt; &quot;(&quot; &lt;&lt; result[i][0] &lt;&lt; &quot;, &quot; &lt;&lt; result[i][1] &lt;&lt; &quot;) &quot; ;  &#xd;
        }&#xd;
              &#xd;
              cout&lt;&lt;&quot;\n&quot;; &#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
    return 0; &#xd;
}&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/CPP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Java Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Java Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
public class CLASS_NAME_PLCHOLDR&#xd;
{&#xd;
	/*&#xd;
	   Write your code inside this function.&#xd;
	   DO NOT modify the method signature&#xd;
	   DO NOT modify/remove any system generated code/comments&#xd;
	*/&#xd;
    private static int[] DoWork(int numberOfStocks, int[] prices)&#xd;
    {&#xd;
     int[] result = new int[]{24, 40};&#xd;
&#xd;
     return result;&#xd;
    }&#xd;
&#xd;
    public static void main(String[] args)&#xd;
    {&#xd;
&#xd;
        //You may change the input values for testing&#xd;
       int[] prices = new int[] {45, 24, 35, 31, 40, 38, 11};&#xd;
       int numberOfStocks = 7;&#xd;
&#xd;
        int[] result = DoWork(numberOfStocks, prices);&#xd;
        System.out.println(result[0]);&#xd;
        System.out.println(result[1]);&#xd;
&#xd;
        //DO NOT remove/modify the below line&#xd;
        //PLCHLDR_TSTCASE_EXE//&#xd;
&#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASES//&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Java</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PHP Compiler" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryMnmMBaE3mjYm1cKB</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PHP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
&lt;?php&#xd;
&#xd;
/*&#xd;
 * Write your code inside this function.&#xd;
 * DO NOT modify the method signature&#xd;
 * DO NOT modify/remove any system generated code/comments&#xd;
 *&#xd;
 * $input - Input array&#xd;
 * $n - Number of elements in the array&#xd;
 * $k - Target sum&#xd;
 *&#xd;
 * Return a 2-dimensional array with the pairs in addition to printing the result&#xd;
 * Return an empty array if there is no pair&#xd;
*/&#xd;
function DoWork($input, $n, $k) {&#xd;
    //Below example shows how to return result&#xd;
    //Exaple if result = {{1,2}, {3,4} }&#xd;
    return [[1,4], [2,3]];&#xd;
}&#xd;
&#xd;
//You may change the input values for testing&#xd;
$input = [1, 2, 3, 4, 5, 6];&#xd;
$n = 6;&#xd;
$k = 5;&#xd;
$result = DoWork($input, $n, $k);&#xd;
echo &apos;Pairs whose sum is &apos;  . $k . &apos;: &apos;;&#xd;
foreach ($result as $pair) {&#xd;
    echo &quot;(&quot; . $pair[0] . &apos;,&apos; . $pair[1] . &quot;) &quot;;&#xd;
}&#xd;
&#xd;
//DO NOT remove/modify the lines below&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
//PLCHLDR_TSTCASE_EXE//&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/PHP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.ipSource">${ip}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Python Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Python Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#Write your code inside this function.&#xd;
#DO NOT modify the method signature&#xd;
#DO NOT modify/remove any system generated code/comments&#xd;
&#xd;
def DoWork(input):&#xd;
    return &quot;Hello &quot; + input&#xd;
&#xd;
# DO NOT remove/modify the below line&#xd;
# PLCHLDR_TSTCASES#&#xd;
&#xd;
# You may change the input values for testing&#xd;
input = &quot;World&quot;&#xd;
&#xd;
result = DoWork(input)&#xd;
#DO NOT remove/modify the below line&#xd;
#PLCHLDR_TSTCASE_EXE#&#xd;
&#xd;
print(result)&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Python</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_PHP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_PHP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_PHP Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Compiler Test_Python Compiler" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <longProp name="ThreadGroup.start_time">1550484376000</longProp>
        <longProp name="ThreadGroup.end_time">1550484376000</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result_26_June_2020_prod_New.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Prod_Test\Token.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\QodeLab_Trial\Token\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Access Token CSV" enabled="false">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">F:\JMeter\apache-jmeter-5.2.1\bin\login_result.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">token</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIServerDomain_1" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain_1</stringProp>
              <stringProp name="Argument.value">api-qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain_1" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain_1</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.build</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="APIServerDomain" elementType="Argument">
              <stringProp name="Argument.name">APIServerDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ApplicationDomain" elementType="Argument">
              <stringProp name="Argument.name">ApplicationDomain</stringProp>
              <stringProp name="Argument.value">qodelab.qburst.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
          <collectionProp name="DNSCacheManager.servers"/>
          <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
          <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
        </DNSCacheManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">true</boolProp>
          <boolProp name="CacheManager.controlledByThread">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="C Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;stdio.h&gt;&#xd;
#include &lt;string.h&gt;&#xd;
#include &lt;stdlib.h&gt;&#xd;
&#xd;
/*&#xd;
   Write your code inside this function.&#xd;
   DO NOT modify the method signature&#xd;
   DO NOT modify/remove any system generated code/comments...&#xd;
*/&#xd;
void do_work(int n, int K, int*  input, int** result){&#xd;
   &#xd;
   // Below example shows how to return result.&#xd;
   // Exaple if result = {{1,2}, {3,4} }&#xd;
     result[0][0] = 1;&#xd;
     result[0][1] = 2;&#xd;
     result[1][0] = 3;&#xd;
     result[1][1] = 4;&#xd;
}&#xd;
&#xd;
 int ** initialize_max_2d_array(int row, int col) {&#xd;
    &#xd;
     int **p;&#xd;
     p  = malloc(sizeof(int*) * row);&#xd;
     for (int i = 0; i &lt; row; i++) {&#xd;
         p[i]  = malloc(sizeof(int*) * 2);&#xd;
         for(int j = 0; j &lt; col; j++) {&#xd;
           p[i][j] = &apos;\0&apos;;  &#xd;
         }&#xd;
     }&#xd;
     &#xd;
     return p;&#xd;
 }&#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
 &#xd;
&#xd;
int main() {&#xd;
    // Edit the vals to try differect combinations&#xd;
    int n = 7;&#xd;
    int input[] = {1,2,3,4,5,6,7};&#xd;
    int K = 10;&#xd;
    &#xd;
    &#xd;
    // Result is is a 2D array with result[n/2][2] - n/2 is the max combination possible and 2 is the max lenth for each array&#xd;
    &#xd;
    // ****** Don&apos;t edit  below code**********&#xd;
    int **result;&#xd;
    result = initialize_max_2d_array(n/2, 2);&#xd;
    &#xd;
    do_work(n,K, input,result);&#xd;
     &#xd;
     printf(&quot;Result: &quot;);&#xd;
     for(int i = 0; i &lt; n/2; i++)&#xd;
    { &#xd;
        printf(&quot;(%d,%d) &quot;, *( *(result + i)), *( *(result + i) + 1) );&#xd;
&#xd;
    }&#xd;
    &#xd;
    //DO NOT remove/modify the below line&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
   &#xd;
    return 0;&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CPP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundarywN8597zqcwZyftxf</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CPP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#include &lt;bits/stdc++.h&gt; &#xd;
#include &lt;unordered_set&gt; &#xd;
#include &lt;vector&gt;&#xd;
&#xd;
using namespace std; &#xd;
  &#xd;
vector&lt;vector&lt;int&gt; &gt;  DoWork(int input[], int n, int k) &#xd;
{ &#xd;
    // Below example shows how to return result.&#xd;
    // Exaple suppose result = {{1,2}, {3,4} }&#xd;
    vector&lt;vector&lt;int&gt; &gt; result;&#xd;
    &#xd;
    vector&lt;int&gt; pair = {1,9};&#xd;
    result.push_back(pair);&#xd;
         &#xd;
    pair = {3,7};&#xd;
    result.push_back(pair);&#xd;
    &#xd;
    return result;&#xd;
} &#xd;
&#xd;
//DO NOT remove/modify the below line.&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
// Driver function to test the above function &#xd;
int main() &#xd;
{ &#xd;
    // Edit the vals to try differect combinations&#xd;
    int input[] = {-1, 5, 7, 1, 5, 3, 3, 1,3} ; &#xd;
    int n = 9; &#xd;
    int k = 6; &#xd;
    &#xd;
    vector&lt;vector&lt;int&gt; &gt; result = DoWork(input, n, k);&#xd;
    if (result.empty()) {&#xd;
        cout &lt;&lt; &quot;None&quot;;&#xd;
    } else {&#xd;
        &#xd;
        for (unsigned  int i = 0; i &lt; result.size(); i++) {&#xd;
             cout &lt;&lt; &quot;(&quot; &lt;&lt; result[i][0] &lt;&lt; &quot;, &quot; &lt;&lt; result[i][1] &lt;&lt; &quot;) &quot; ;  &#xd;
        }&#xd;
              &#xd;
              cout&lt;&lt;&quot;\n&quot;; &#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASE_EXE//&#xd;
    return 0; &#xd;
}&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundarywN8597zqcwZyftxf--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/CPP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Java Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Java Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
public class CLASS_NAME_PLCHOLDR&#xd;
{&#xd;
	/*&#xd;
	   Write your code inside this function.&#xd;
	   DO NOT modify the method signature&#xd;
	   DO NOT modify/remove any system generated code/comments&#xd;
	*/&#xd;
    private static int[] DoWork(int numberOfStocks, int[] prices)&#xd;
    {&#xd;
     int[] result = new int[]{24, 40};&#xd;
&#xd;
     return result;&#xd;
    }&#xd;
&#xd;
    public static void main(String[] args)&#xd;
    {&#xd;
&#xd;
        //You may change the input values for testing&#xd;
       int[] prices = new int[] {45, 24, 35, 31, 40, 38, 11};&#xd;
       int numberOfStocks = 7;&#xd;
&#xd;
        int[] result = DoWork(numberOfStocks, prices);&#xd;
        System.out.println(result[0]);&#xd;
        System.out.println(result[1]);&#xd;
&#xd;
        //DO NOT remove/modify the below line&#xd;
        //PLCHLDR_TSTCASE_EXE//&#xd;
&#xd;
    }&#xd;
&#xd;
    //DO NOT remove/modify the below line.&#xd;
    //PLCHLDR_TSTCASES//&#xd;
}&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Java</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PHP Compiler" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryMnmMBaE3mjYm1cKB</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PHP Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
&lt;?php&#xd;
&#xd;
/*&#xd;
 * Write your code inside this function.&#xd;
 * DO NOT modify the method signature&#xd;
 * DO NOT modify/remove any system generated code/comments&#xd;
 *&#xd;
 * $input - Input array&#xd;
 * $n - Number of elements in the array&#xd;
 * $k - Target sum&#xd;
 *&#xd;
 * Return a 2-dimensional array with the pairs in addition to printing the result&#xd;
 * Return an empty array if there is no pair&#xd;
*/&#xd;
function DoWork($input, $n, $k) {&#xd;
    //Below example shows how to return result&#xd;
    //Exaple if result = {{1,2}, {3,4} }&#xd;
    return [[1,4], [2,3]];&#xd;
}&#xd;
&#xd;
//You may change the input values for testing&#xd;
$input = [1, 2, 3, 4, 5, 6];&#xd;
$n = 6;&#xd;
$k = 5;&#xd;
$result = DoWork($input, $n, $k);&#xd;
echo &apos;Pairs whose sum is &apos;  . $k . &apos;: &apos;;&#xd;
foreach ($result as $pair) {&#xd;
    echo &quot;(&quot; . $pair[0] . &apos;,&apos; . $pair[1] . &quot;) &quot;;&#xd;
}&#xd;
&#xd;
//DO NOT remove/modify the lines below&#xd;
//PLCHLDR_TSTCASES//&#xd;
&#xd;
//PLCHLDR_TSTCASE_EXE//&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryMnmMBaE3mjYm1cKB--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port">5002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/PHP</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Python Compiler" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryIuAwPGr5318HTtIb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Python Compile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;codeFile&quot;&#xd;
&#xd;
#Write your code inside this function.&#xd;
#DO NOT modify the method signature&#xd;
#DO NOT modify/remove any system generated code/comments&#xd;
&#xd;
def DoWork(input):&#xd;
    return &quot;Hello &quot; + input&#xd;
&#xd;
# DO NOT remove/modify the below line&#xd;
# PLCHLDR_TSTCASES#&#xd;
&#xd;
# You may change the input values for testing&#xd;
input = &quot;World&quot;&#xd;
&#xd;
result = DoWork(input)&#xd;
#DO NOT remove/modify the below line&#xd;
#PLCHLDR_TSTCASE_EXE#&#xd;
&#xd;
print(result)&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;questionId&quot;&#xd;
&#xd;
9b6f5027-5f72-4088-a8a1-1d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;arguments&quot;&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb&#xd;
Content-Disposition: form-data; name=&quot;fileName&quot;&#xd;
&#xd;
Q9b6f50275f724088a8a11d7d3d0ad36d&#xd;
------WebKitFormBoundaryIuAwPGr5318HTtIb--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${APIServerDomain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/assessment/compiler/execute/Python</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.ipSource">${ip}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">2000</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Python Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_Python Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_Python Compiler" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="false">
        <collectionProp name="ultimatethreadgroupdata"/>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_1" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report_1" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table_1" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
