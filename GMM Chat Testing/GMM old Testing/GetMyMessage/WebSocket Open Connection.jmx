<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">var ioOptions ={
	host:&quot;adarshtest1&quot;,
hostname:&quot;adarshtest1&quot;,
path:&quot;/socket.io&quot;,
port:&quot;4910&quot;,
query:{userid: &quot;820&quot;, email: &quot;shyamjptpm+1@gmail.com&quot;, namespace: &quot;gmm-adarshtest1&quot;},
//reconnection limit:1000,
secure:false
}

portjs = &quot;https://adarshtest1.messageboxapp.com/socket.io/socket.io.js&quot;;
socket = io.connect(portjs, ioOptions);
//refreshOpenRequests();
socket.on(&apos;connect&apos;, function(message) {
    ////
    console.info(&quot;__connected__&quot;);
    swal({
        title: gmmValAlerts[&quot;GMM_VAL_NW_CONNECTED_MSG&quot;],
        text: &quot;&quot;,
        type:&quot;success&quot;,
        showConfirmButton: false,
        allowEscapeKey: false
    });
    setTimeout(function() {
        swal.close();
        if(localStorage.getItem(&apos;browserAlertStatus&apos;) != &apos;true&apos;){
            showBrowserAlerts();
        }
    }, 1000);

    function showBrowserAlerts(){
        if(!categories){
            setTimeout(function(){
                swal(gmmValAlerts[&apos;GMM_WARNING&apos;], &quot;There are no active Service Categories in your account. Please create at least one category in Settings to start creating requests.&quot;)
            }, 3000);
        }
        if(!isChrome){
            setTimeout(function(){
                swal(gmmValAlerts[&apos;GMM_WARNING&apos;], gmmValAlerts[&quot;GMM_GOOGLE_CHROME_WARNING&quot;]);
                localStorage.setItem(&apos;browserAlertStatus&apos;, &apos;true&apos;);
            }, 4000);
        }
        var screenWidth = screen.width;
        if(screenWidth&lt;=1440){
            setTimeout(function(){
                swal(gmmValAlerts[&apos;GMM_WARNING&apos;], gmmValAlerts[&quot;GMM_SMALL_SCREEN_WARNING&quot;]);
                localStorage.setItem(&apos;browserAlertStatus&apos;, &apos;true&apos;);
            }, 6000);
        }
    }

    $(&apos;#network-status&apos;).html(&apos;&lt;div class=&quot;label&quot;&gt;&apos;+gmmValAlerts[&apos;GMM_NW_STATUS_MSG&apos;]+&apos;&amp;nbsp;&amp;nbsp;&apos;+gmmValAlerts[&apos;GMM_VAL_NW_CONNECTED_MSG&apos;]+&apos;&lt;/div&gt;&apos;).fadeOut(&apos;slow&apos;).fadeIn(&apos;slow&apos;);
    $(&apos;.nano1&apos;).removeClass(&apos;ajax-loader-kingsadmin&apos;);
    $(&apos;#load_contacts&apos;).removeClass(&apos;ajax-loader-kingsadmin&apos;);

    try
    {
        //        refreshOpenRequests();
        refreshContacts(0);
        var openedWindow = JSON.parse(localStorage.getItem(&apos;openedMsg&apos;));
        $.each(openedWindow, function(index, obj) {

            var explode = obj.split(&quot;#&quot;);

            if (explode[0] == &quot;CUSTOMER&quot;)
            {
                if( (explode[1])*1 ) {
                    getOldChat(removeChr(index), 1, explode[1]);
                    //console.log(&quot;Appending opened reference to widget table row.&quot;);
                    addOpenedRefToOpenRow(removeChr(index), explode[1]);
                }else{
                    if(!$(index).is(&apos;:visible&apos;) &amp;&amp; ($(&apos;.initialRequestWindow&apos;).length == 0))
                        getOldChat(removeChr(index), 1, explode[1]);
                }
            }
            else
            {
                var newIndex = appendChr(parseInt(removeChr(index)) -1);

                var internalChatId = removeChr(index);




                var reqData = new Object();
                reqData.chatId = internalChatId;
                ajax_loader_disable();
                $.ajax({
                    type: &apos;POST&apos;,
                    dataType: &quot;json&quot;,
                    url: baseUrl + &quot;/home/getrequestdetailsbyinternalchatid&quot;,
                    data: reqData,
                    success: function(data) {
                        if(data[0]){
                            setTimeout(function(){
                                $(&quot;#serviceregisterUpdateCHT&quot;+data[0][&apos;SR_ChatId&apos;]+&quot; .chtwitbut&quot;).click();
                            }, 2000);
                        }
                    }
                });
            }

        });
        if(companySelectedPackageId == 1) {
            if($.isEmptyObject(openedWindow)) {
                if($(&apos;.customerChat&apos;).length == 0) {
                    send_internalV3();
                }
            } else if (typeof(openedWindow.no) != &quot;undefined&quot;) { // Login condition
                if($(&apos;.customerChat&apos;).length == 0) {
                    send_internalV3();
                }
            }
        }
        else {
            if($.isEmptyObject(openedWindow)) {
                if($(&apos;.initialRequestWindow&apos;).length == 0) {
                    send_internalV3();
                }
            } else if (typeof(openedWindow.no) != &quot;undefined&quot;) { // Login condition
                if($(&apos;.initialRequestWindow&apos;).length == 0) {
                    send_internalV3();
                }
            }
        }

    }
    catch (e) {
        //        console.log(e);
    }

});
socket.on(&apos;disconnect&apos;, function(err) {
    errorconnection();
    socket.io.reconnect();
});
socket.on(&apos;reconnect&apos;, function(message) {

});
socket.on(&apos;reconnecting&apos;, function(message) {

});
socket.on(&apos;connecting&apos;, function(message) {

    //$(&apos;#msg&apos;).html(&quot;&lt;p class=&apos;ui-state-error ui-corner-all socket-connecting&apos; &gt;Connecting...&lt;/p&gt;&quot;);
    // $(&apos;#msg&apos;).html(&quot;&lt;div class=&apos;label label-warning&apos; &gt;&quot;+gmmValAlerts[&apos;GMM_VAL_CONNECTING_MSG&apos;]+&quot;...&lt;/div&gt;&quot;).fadeOut(&apos;slow&apos;).fadeIn(&apos;slow&apos;);
    //$(&apos;#network-status&apos;).removeClass(&apos;btn-success&apos;);
    //$(&apos;#network-status&apos;).addClass(&apos;btn-warning&apos;);
    $(&apos;#network-status&apos;).html(gmmValAlerts[&apos;GMM_VAL_CONNECTING_MSG&apos;]+&apos;...&apos;);

});
// sample emit function
socket.emit(&apos;clientLoginInternal&apos;,
        {&quot;userid&quot;: &quot;704&quot;,
            &quot;companyid&quot;: &quot;339&quot;,
            &quot;username&quot;: &quot;rosepv123+1@gmail.com&quot;,
            &quot;password&quot;: &quot;abcd1234&quot;,
            &quot;usertype&quot;: &quot;Internal&quot;,
            &quot;usergroupid&quot;: &quot;3&quot;, //TODO
            &quot;usergroup&quot;: &quot;Agent&quot;,
            &quot;firstname&quot;: &quot;Dual&quot;,
            &quot;lastname&quot;: &quot;Rose&quot;,
            &quot;propertycode&quot;: &quot;&quot;,
            &quot;chatcategoryid&quot;: &quot;&quot;,
            &quot;chatcategory&quot;: &apos;&apos;, //TODO
            &quot;uniqueid&quot;: &quot;haqrqdrkkt7ab515876afbl157&quot;,
            &quot;targetuniqueid&quot;: &quot;&quot;}); </stringProp>
        </JSR223Sampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
          <boolProp name="TLS">true</boolProp>
          <stringProp name="server">adarshtest1.messageboxapp.com</stringProp>
          <stringProp name="port">4910</stringProp>
          <stringProp name="path">socket.io</stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.PingPongSampler guiclass="eu.luminis.jmeter.wssampler.PingPongSamplerGui" testclass="eu.luminis.jmeter.wssampler.PingPongSampler" testname="WebSocket Ping/Pong" enabled="true">
          <stringProp name="type">PingPong</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.PingPongSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="WebSocket request-response Sampler" enabled="true">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">false</boolProp>
          <stringProp name="requestData">Hello</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="WebSocket request-response Sampler" enabled="true">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">true</boolProp>
          <stringProp name="requestData">0x62 0x6c 0x61 0x7a 0x65 0x6d 0x65 0x74 0x65 0x72</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">false</boolProp>
          <stringProp name="requestData">Hello-Text</stringProp>
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler" enabled="true">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">true</boolProp>
          <stringProp name="requestData">0x62 0x6c 0x61 0x7a 0x65 0x6d 0x65 0x74 0x65 0x72 0x2d 0x74 0x65 0x78 0x74</stringProp>
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler" enabled="true">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">false</boolProp>
          <boolProp name="createNewConnection">false</boolProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="optional">false</boolProp>
        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler" enabled="true">
          <boolProp name="TLS">false</boolProp>
          <stringProp name="server"></stringProp>
          <stringProp name="port">80</stringProp>
          <stringProp name="path"></stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">true</boolProp>
          <boolProp name="createNewConnection">false</boolProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="optional">false</boolProp>
        </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
        <hashTree/>
        <eu.luminis.jmeter.wssampler.CloseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.CloseWebSocketSampler" testname="WebSocket Close" enabled="true">
          <stringProp name="statusCode">1000</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
        </eu.luminis.jmeter.wssampler.CloseWebSocketSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
